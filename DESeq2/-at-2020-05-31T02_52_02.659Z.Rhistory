knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
FDR.CUT <- params$FDR
LFC.CUT <- params$LFC
library(edgeR)
library(EBSeq)
library(DESeq2)
library(goseq)
library(seqsetvis)
library(tidyverse)
library(EnhancedVolcano)
library(ggpubr)
library(googledrive)
library(knitr)
source('~/Documents/R-Projects/Amphipod-Analysis/Functions/reactome.amnat.R')
source('~/Documents/R-Projects/Amphipod-Analysis/Functions/GOamnat.R')
source('~/DocumentsR-Projects/Amphipod-Analysis/Functions/getFly.R')
library(edgeR)
library(EBSeq)
library(DESeq2)
library(goseq)
library(seqsetvis)
library(tidyverse)
library(EnhancedVolcano)
library(ggpubr)
library(googledrive)
library(knitr)
source('~/Documents/R-Projects/Amphipod-Analysis/Functions/reactome.amnat.R')
source('~/Documents/R-Projects/Amphipod-Analysis/Functions/GOamnat.R')
source('~/Documents/R-Projects/Amphipod-Analysis/Functions/getFly.R')
source('~/Documents/R-Projects/R_GlobalFunction/GoogleDrive_Functions.R')
# optional saves auth token for google drive, run  prior to report render if you want to download files during report render, otherwise comment out drive downloads (will get rrror if files arent already present in working directory)
# drive_auth(cache = "~/.secrets")
#
options(
gargle_oauth_cache = "~/.secrets",
gargle_oauth_email = TRUE
)
# Counts
drive_download(as_id('158y7x6PBsaGRO0dyLqTL7bnOuWuaCDXJ'), overwrite = T) # download count table
Ogril.cnts <- read.delim("Ogril1_clean_count.txt", stringsAsFactors=FALSE)
file.remove("Ogril1_clean_count.txt")
colnames(Ogril.cnts)<- sub("X.gpfs.data.drand.O_grillus_genomic_resources.Bam_files_Ogril1_clean.","",colnames(Ogril.cnts))
colnames(Ogril.cnts)<- sub(".bam","",colnames(Ogril.cnts))
drive_download(as_id('1UknLwCJbrDXiSyoVsBa3V8RfVea7hI5G'), overwrite = T)
geneinfo<- read.delim('Ogril1_RNAevidence_MASTER_ANNOTATION_FILE.txt', stringsAsFactors=FALSE)
file.remove('Ogril1_RNAevidence_MASTER_ANNOTATION_FILE.txt')
# rename columns to match cluster file names
colnames(Ogril.cnts)<- sub(".noHWD.bam","",colnames(Ogril.cnts))
infection.status <- colnames(Ogril.cnts)
infection.status<- str_extract(infection.status,pattern = 'uninf')
infection.status[is.na(infection.status)] = 'inf'
pdata = data.frame(colnames(Ogril.cnts), infection.status)
# New method,
keep <- filterByExpr(Ogril.cnts,group = infection.status)
Ogril.cnts <- Ogril.cnts[keep,]
# Create matrix of the counts for DESeq
cnts <- as.matrix(Ogril.cnts) # set counts as matrix
# create coldata and factorize variables
pdata <- data.frame(colnames(Ogril.cnts), infection.status)
# Set up DESeq Object
dds <- DESeqDataSetFromMatrix(countData = cnts,
colData = pdata,
design = ~ 0 + infection.status )
dds<- DESeq(dds)
resultsNames(dds)
resIf_DESeq2 <- results(dds,alpha=0.05,contrast = c('infection.status', 'inf', 'uninf'))  # specifiy contrasts manually
DEtable_InfectionStatus_Genome_DESeq <- resIf_DESeq2 %>%
as_tibble(rownames = 'PredictedGene') %>%
dplyr::filter( padj <= FDR.CUT, abs(log2FoldChange) > LFC.CUT) %>%
dplyr::mutate(FlyOrhtolog = getFLY(PredictedGene)) %>%
dplyr::select(FlyOrhtolog, everything())
DEtable_InfectionStatus_Genome_DESeq %>%
data.frame()
EnhancedVolcano(resIf_DESeq2,
lab =getFLY(row.names(resIf_DESeq2)),
x = 'log2FoldChange',
subtitle = '',
caption = '',
gridlines.major=F,
gridlines.minor=F,
colAlpha = .3,
col=c("black", "black", "black", "red3"),
labSize = 1.5,
labCol = 'grey10',
legendPosition = 'none',pCutoff = 0.05,
title = 'DESeq2: Infected vs Uninfected',
y = 'padj')
GO_upGenes_InfectionStatus_Genome_DESeq<- DEtable_InfectionStatus_Genome_DESeq %>%
dplyr::filter(padj <= FDR.CUT, log2FoldChange > LFC.CUT) %>%
pull(PredictedGene) %>%
GOamnat()
DEtable_InfectionStatus_Genome_DESeq
GO_upGenes_InfectionStatus_Genome_DESeq<- DEtable_InfectionStatus_Genome_DESeq %>%
dplyr::filter(padj <= FDR.CUT, log2FoldChange > LFC.CUT) %>%
pull(PredictedGene)
DEtable_InfectionStatus_Genome_DESeq %>%
dplyr::filter(padj <= FDR.CUT, log2FoldChange > LFC.CUT) %>%
pull(PredictedGene)
DEtable_InfectionStatus_Genome_DESeq %>%
dplyr::filter(padj <= FDR.CUT, log2FoldChange > LFC.CUT) %>%
pull(PredictedGene) %>%
GOamnat()
source('~/Documents/R-Projects/Amphipod-Analysis/Functions/GOamnat.R')
GO_upGenes_InfectionStatus_Genome_DESeq<- DEtable_InfectionStatus_Genome_DESeq %>%
dplyr::filter(padj <= FDR.CUT, log2FoldChange > LFC.CUT) %>%
pull(PredictedGene) %>%
GOamnat()
GO_upGenes_InfectionStatus_Genome_DESeq %>%
data.frame()
GO_upGenes_InfectionStatus_Genome_DESeq<- DEtable_InfectionStatus_Genome_DESeq %>%
dplyr::filter(padj <= FDR.CUT, log2FoldChange > LFC.CUT) %>%
pull(PredictedGene) %>%
GOamnat()
GO_upGenes_InfectionStatus_Genome_DESeq %>%
data.frame()
GO_upGenes_InfectionStatus_Genome_DESeq %>%
#write_csv('Tables/GO_upGenes_InfectionStatus_Genome_DESeq.csv')
upload_sheets('GO_upGenes_InfectionStatus_Genome_DESeq', path = as_id('https://drive.google.com/open?id=1l-FTWGEgtXl8B7MD6V-iQZTrQhqmoqde'))
GO_downGenes_InfectionStatus_Genome_DESeq <- DEtable_InfectionStatus_Genome_DESeq %>%
dplyr::filter(padj <= FDR.CUT, log2FoldChange < -1*LFC.CUT) %>%
pull(PredictedGene) %>%
GOamnat()
GO_downGenes_InfectionStatus_Genome_DESeq %>%
data.frame()
GO_downGenes_InfectionStatus_Genome_DESeq %>%
#write_csv('Tables/GO_downGenes_InfectionStatus_Genome_DESeq.csv')
upload_sheets('GO_downGenes_InfectionStatus_Genome_DESeq', path = as_id('https://drive.google.com/open?id=1l-FTWGEgtXl8B7MD6V-iQZTrQhqmoqde'))
colp <- c(up = 'darkred', down = 'darkblue')
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(term = factor(term, levels = term)) %>%
mutate(over_represented_pvalue = log10(over_represented_pvalue)) %>%
mutate(scaling = if_else(Direction == 'down',1,-1)) %>%
mutate(padj = over_represented_pvalue * scaling) %>%
arrange(desc(padj)) %>%
ggplot(aes(fct_reorder(term, padj), padj, fill = Direction)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = colp)+
ylab('log10 FDR')+ xlab('Ontology') +
coord_flip()+
ggtitle('DESeq: Gene Ontology') +
theme_pubr()
colp <- c(up = 'darkred', down = 'darkblue')
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
#mutate(term = factor(term, levels = term)) %>%
mutate(over_represented_pvalue = log10(over_represented_pvalue)) %>%
mutate(scaling = if_else(Direction == 'down',1,-1)) %>%
mutate(padj = over_represented_pvalue * scaling) %>%
arrange(desc(padj)) %>%
ggplot(aes(fct_reorder(term, padj), padj, fill = Direction)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = colp)+
ylab('log10 FDR')+ xlab('Ontology') +
coord_flip()+
ggtitle('DESeq: Gene Ontology') +
theme_pubr()
ggsave('GO_InfectionStatus_Genome_DESeq.png', device = 'png', dpi = 300)
upload_file('GO_InfectionStatus_Genome_DESeq.png',path = as_id('https://drive.google.com/open?id=1qKn5sLGuNPvw0EhRQZVN-rAEwhiEHsAG'))
colp <- c(up = 'darkred', down = 'darkblue')
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
#mutate(term = factor(term, levels = term)) %>%
mutate(over_represented_pvalue = log10(over_represented_pvalue)) %>%
mutate(scaling = if_else(Direction == 'down',1,-1)) %>%
mutate(padj = over_represented_pvalue * scaling) %>%
arrange(desc(padj)) %>%
ggplot(aes(fct_reorder(term, padj), padj, fill = Direction)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = colp)+
ylab('log10 FDR')+ xlab('Ontology') +
coord_flip()+
ggtitle('DESeq: Gene Ontology') +
theme_pubr()
ggsave('GO_InfectionStatus_Genome_DESeq.png', device = 'png', dpi = 300)
upload_file('GO_InfectionStatus_Genome_DESeq.png',path = as_id('https://drive.google.com/open?id=1qKn5sLGuNPvw0EhRQZVN-rAEwhiEHsAG'))
colp <- c(up = 'darkred', down = 'darkblue')
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
#mutate(term = factor(term, levels = term)) %>%
mutate(over_represented_pvalue = log10(over_represented_pvalue)) %>%
mutate(scaling = if_else(Direction == 'down',1,-1)) %>%
mutate(padj = over_represented_pvalue * scaling) %>%
arrange(desc(padj)) %>%
ggplot(aes(fct_reorder(term, padj), padj, fill = Direction)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = colp)+
ylab('log10 FDR')+ xlab('Ontology') +
coord_flip()+
ggtitle('DESeq: Gene Ontology') +
theme_pubr(base_size = 9)
ggsave('GO_InfectionStatus_Genome_DESeq.png', device = 'png', dpi = 300)
upload_file('GO_InfectionStatus_Genome_DESeq.png',path = as_id('https://drive.google.com/open?id=1qKn5sLGuNPvw0EhRQZVN-rAEwhiEHsAG'))
GO_downGenes_InfectionStatus_Genome_DESeq
go.trim <- function(go.res, p.cutoff = 0.05) {
require(GSEABase)
myCollection <- go.res %>%
filter(padj <= p.cutoff) %>%
pull(category) %>%
GOCollection()
# download go slid database
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_generic.obo')
# trim terms
goSlim(myCollection, slim, "BP") %>%
as_tibble(rownames = 'category') %>%
filter(Count > 0 ) %>%
return()
}
GO_upGenes_InfectionStatus_Genome_DESeq %>%
go.trim() %>%
data.frame()
GO_upGenes_InfectionStatus_Genome_DESeq %>%
mutate(padj = over_represented_pvalue) %>%
go.trim() %>%
data.frame()
BiocManager::install('GSEABase')
install.packages('xml2')
install.packages("xml2")
BiocManager::install('GSEABase')
require(GSEABase)
GO_upGenes_InfectionStatus_Genome_DESeq %>%
mutate(padj = over_represented_pvalue) %>%
go.trim() %>%
data.frame()
library(edgeR)
library(EBSeq)
library(DESeq2)
library(goseq)
library(seqsetvis)
library(tidyverse)
library(EnhancedVolcano)
library(ggpubr)
library(googledrive)
library(readxl)
options(
gargle_oauth_cache = "~/.secrets",
gargle_oauth_email = TRUE
)
source('Functions/getFly.R')
source('Functions/GOamnat.R')
# rmarkdown::render("DESeq2/DESeq2.Rmd")
# rmarkdown::render("EBSeq/EBSeq.Rmd")
# rmarkdown::render("edgeR/edgeR.Rmd")
geneinfo<- read.delim('Counts_Annotations/Ogril1_RNAevidence_MASTER_ANNOTATION_FILE.txt', stringsAsFactors=FALSE)
#### PCA ######
# vsd<- vst(dds,blind = T)
#
# pcData<- plotPCA(vsd, intgroup = c("colnames.Ogril.cnts.", "infection.status"),returnData = T)
# percentVar <- round(100 * attr(pcData, "percentVar"))
#
# ggplot(pcData, aes(PC1, PC2, color = infection.status, label = colnames.Ogril.cnts.)) +
#   geom_point(size=6,alpha = .8) +
#   geom_text(size=2, nudge_y = 6)+
#   xlab(paste0("PC1: ",percentVar[1],"% variance")) +
#   ylab(paste0("PC2: ",percentVar[2],"% variance")) +
#   theme_bw()
#
# ggsave('PCA.png', device = 'png', dpi = 300)
# upload_file('PCA.png',
#             path = as_id('https://drive.google.com/open?id=1uf3B1DOlM5h3Jsxk_rBRM2eC1reAxzIv'))
##### Infection Status ####
# read in saved tables
drive_download(as_id('1gvrQ2u_p04_E3KmV0aXImJRiENlmX3IkNVZjju--Uok'), overwrite = T) # download count table
DEtable_InfectionStatus_Genome_DESeq <- read_excel('DEtable_InfectionStatus_Genome_DESeq.xlsx')
file.remove('DEtable_InfectionStatus_Genome_DESeq.xlsx')
drive_download(as_id('1N07lSDQIeD9v78lV5cXeW-ev27-WhmJLWiQSPsKafdc'), overwrite = T) # download count table
DEtable_InfectionStatus_Genome_edgeR <- read_excel('DEtable_InfectionStatus_Genome_edgeR.xlsx')
file.remove('DEtable_InfectionStatus_Genome_edgeR.xlsx')
drive_download(as_id('107GctPvQYTx5kFVxtqwA6DxXiQqnzr41SPASsPDW27c'), overwrite = T) # download count table
DEtable_InfectionStatus_Genome_EBSeq <- read_excel('DEtable_InfectionStatus_Genome_EBSeq.xlsx')
file.remove('DEtable_InfectionStatus_Genome_EBSeq.xlsx')
overlap.list.InfectionStatus = list(pull(DEtable_InfectionStatus_Genome_DESeq,'PredictedGene'),
pull(DEtable_InfectionStatus_Genome_edgeR,'PredictedGene'),
pull(DEtable_InfectionStatus_Genome_EBSeq,'PredictedGene'))
names(overlap.list.InfectionStatus) = c('DESeq2','edgeR','EBSeq')
overlap.InfectionStatus <- ssvMakeMembTable(overlap.list.InfectionStatus)
ssvFeatureVenn(overlap.InfectionStatus,circle_colors =c("red3",'goldenrod','darkgreen'),
fill_alpha=.4,
line_alpha=0)
ggsave('InfectionStatus_MethodsOverlap.png', device = 'png', dpi = 300)
upload_file('InfectionStatus_MethodsOverlap.png',
path = as_id('https://drive.google.com/open?id=1uf3B1DOlM5h3Jsxk_rBRM2eC1reAxzIv'))
library(edgeR)
library(EBSeq)
library(DESeq2)
library(goseq)
library(seqsetvis)
library(tidyverse)
library(EnhancedVolcano)
library(ggpubr)
library(googledrive)
library(readxl)
options(
gargle_oauth_cache = "~/.secrets",
gargle_oauth_email = TRUE
)
source('Functions/getFly.R')
source('Functions/GOamnat.R')
getwd()
source('/Functions/getFly.R')
GO_upGenes_InfectionStatus_Genome_DESeq
ReactomeTable_InfectionStatus_Genome_DESeq
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(padj = over_represented_pvalue) %>%
go.trim()
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(padj = over_represented_pvalue) %>%
go.trim() ->slimmed
slimmed$category %in% GO_downGenes_InfectionStatus_Genome_DESeq$category
slimmed$category %in% GO_upGenes_InfectionStatus_Genome_DESeq$category
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) -> combo.GO
slimmed$category %in% combo.GO$category
slimmed
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(padj = over_represented_pvalue) %>%
go.trim() -> slimmed
slimmed
slimmed %>%
ggplot(aes(x = Term, y = Count )) +
geom_boxplot(stat = 'identity') +
coord_flip()
slimmed %>%
ggplot(aes(x = Term, y = Count )) +
geom_bar(stat = 'identity') +
coord_flip()
slimmed %>%
filter (Term != 'biological_process')
slimmed %>%
filter (Term != 'biological_process') %>%
ggplot(aes(x = Term, y = Count )) +
geom_bar(stat = 'identity') +
coord_flip()
slimmed %>%
filter (Term != 'biological_process') %>%
arrange(desc(Count)) %>%
ggplot(aes(x = Term, y = Count )) +
geom_bar(stat = 'identity') +
coord_flip()
slimmed %>%
filter (Term != 'biological_process') %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
coord_flip()
slimmed
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(padj = over_represented_pvalue) %>%
pull(category) -> terms.
# download go slid database
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_flybase_ribbon.obo')
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(padj = over_represented_pvalue) %>%
pull(category) -> myCollection
# download go slid database
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_flybase_ribbon.obo')
# trim terms
goSlim(myCollection, slim, "BP")
library(GSEABase)
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_generic.obo')
# trim terms
goSlim(myCollection, slim, "BP")
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(padj = over_represented_pvalue) %>%
pull(category) %>%
GOCollection()-> myCollection
# download go slid database
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_flybase_ribbon.obo')
# trim terms
goSlim(myCollection, slim, "BP")
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_generic.obo')
# trim terms
goSlim(myCollection, slim, "BP")
# trim terms
goSlim(myCollection, slim )
? goSlim
# download go slid database
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_drosophila.obo')
# trim terms
goSlim(myCollection, slim, "BP") -> slimmed
slimmed %>%
filter (Term != 'biological_process') %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
coord_flip()
slimmed
slimmed %>%
filter (Term != 'biological_process',
Count > 0) %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
coord_flip()
slimmed %>%
filter (Term != 'biological_process',
Count > 1) %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
coord_flip()
slimmed %>%
filter (Term != 'biological_process',
Count > 1) %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
ylab("Slimmed Ontology Terms")+
coord_flip()
slimmed %>%
filter (Term != 'biological_process',
Count > 1) %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
ylab("Slimmed Ontology Terms")+
coord_flip() +
theme_pubr()
slimmed %>%
filter (Term != 'biological_process',
Count > 1) %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
xlab("Slimmed Ontology Terms")+
coord_flip() +
theme_pubr()
# Function to trim GO terms
go.trim <- function(go.res, p.cutoff = 0.05) {
require(GSEABase)
myCollection <- go.res %>%
filter(over_represented_pvalue <= p.cutoff) %>%
pull(category) %>%
GOCollection()
# download go slid database
slim <- getOBOCollection('http://current.geneontology.org/ontology/subsets/goslim_drosophila.obo')
# trim terms
goSlim(myCollection, slim, "BP") %>%
as_tibble(rownames = 'category') %>%
filter(Count > 0 ) %>%
return()
}
GO_downGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'down') %>%
bind_rows(GO_upGenes_InfectionStatus_Genome_DESeq %>%
add_column(Direction = 'up'),
.id = 'direction') %>%
arrange(desc(over_represented_pvalue)) %>%
mutate(padj = over_represented_pvalue) %>%
go.trim() %>%
ggplot(aes(x = fct_reorder(Term, Count), y = Count )) +
geom_bar(stat = 'identity') +
xlab("Slimmed Ontology Terms")+
coord_flip() +
theme_pubr()
source('~/Documents/R-Projects/R_GlobalFunction/Bioconductor_Functions.R')
